import requests
import csv
import codecs
import io
from collections import OrderedDict
import string
import json

from pymarc import parse_xml_to_array


def readMemorizeList(csvfilename):
    """Reads a MemorizeList that was exported from opac.rism.info as csv file.
    (For example, entries with links to all symphonies by Christoph Graupner.)
    Takes just the colum 'Datensatz-ID (0)', removes the unnessecary 'rism'
    at the beginning of the entry and finally int()s the number.

    Parameters
    ----------
    csvfilename : string
        file name of a csv file, generated by the opac

    Returns
    -------
    memo_list
        list containing all 'rismids' as integers

    """

    memo_list = []

    with codecs.open(csvfilename, 'r', encoding='utf-8') as f:
        memorizelist = csv.DictReader(f)

        for row in memorizelist:
            col = row.get('Datensatz-ID (0)', None)
            try:
                # entry starts with 'rism', nobody needs it
                rismid = int(col[4:])
            except:
                # obviously something went wrong with this colum
                rismid = None

            if rismid:
                memo_list.append(rismid)

    return memo_list


def readMARCDataset(rismid):
    data = []

    URL = 'https://opac.rism.info/id/rismid/{rismid}?format=marc'

    # fetch the URL by adding the current rismid
    print("> Parsing", URL.format(rismid=rismid), "...")
    r = requests.get(URL.format(rismid=rismid))


    # result should be xml, so parse it
    # parse_xml_to_array accepts only file-like objects,
    # so we have to convert r.text to a StringIO buffer
    marc_data = io.StringIO(r.text)
    record = parse_xml_to_array(marc_data)[0]

    ### Generate work title
    ### i.e. ''Symphonie in G-Dur GWV 597 (1734)''

    uniform_title = record['240']['a'][:-1]
    key_for_music = record['240']['r']
    gwv = record['240']['n']
    date_of_publication = record['260']['c'][:4]

    # ''Dur'' or ''Moll'' is not saved, as it is not common in English
    if key_for_music in string.ascii_uppercase:
        scale_type = "Dur"
    elif key_for_music in string.ascii_lowercase:
        scale_type = "Moll"

    work_title = "{u} in {k}-{s} {g} ({d})".format(
        u=uniform_title,
        k=key_for_music,
        s=scale_type,
        g=gwv,
        d=date_of_publication)

    ### Field 856 holds the link to the original manuscript
    ### it is shown by adding ''/0002''

    if record['856']['u']:
        tu_da_link = record['856']['u'] + '/0002'
    else:
        tu_da_link = None

    ### Field 031 holds all the melodies as subfields
    melodies = record.get_fields('031')
    for melody in melodies:
        # regards only lines with PAE data
        # and g-clef (ViolinschlÃ¼ssel) -> main melody
        if melody['c'] == '1':
            print("    > Found Melody {}!".format(melody['b']))
            set = OrderedDict()
            set['id'] = int(melody['u'])
            set['work_title'] = work_title
            # now the movement caption - a bit complicated, as there isn't
            # always something like 'Allegro' ...
            if melody['d']:
                set['movement'] = melody['b'] + ". " + melody['d']
            else:
                set['movement'] = melody['b'] + ". (ohne Bezeichnung)"
            set['clef'] = melody['g']
            set['keysig'] = melody['n']
            set['timesig'] = melody['o']
            set['pae_data'] = melody['p']
            set['rism_id'] = rismid
            set['rism_opac_link'] = 'https://opac.rism.info/metaopac/search?View=rism&id=' + str(rismid)
            if tu_da_link:
                set['tu_da_link'] = tu_da_link
            data.append(set)

    return data


def readMARCfromURL(url):
    #r = requests.get(url)

    #print(r.text[0:100])
    reader = parse_xml_to_array('sources.xml')
    record = reader[0]
    for field in record.get_fields('031'):
        print(field['d'], field['p'])

    #for record in reader:
    #    print(record['245']['a'])

def main():
    URL = 'https://muscat.rism.info/sru/sources?operation=searchRetrieve&version=1.1&query=author=Graupner%20AND%20bath.possessingInstitution=D-DS&maximumRecords=10'

    all_melodies = []

    memlist = readMemorizeList('graupner-symphonies.csv')
    for id in memlist[0:5]:
        for melody in readMARCDataset(id):
            all_melodies.append(melody)

    with open('export-melodies.json', 'w') as f:
        f.write(json.dumps(all_melodies, indent=2))

if __name__ == '__main__':
    main()
